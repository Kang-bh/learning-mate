name: CI/CD Pipeline

on:
  push:
    branches:
      - main

env:
  DOCKER_IMAGE: kabyho3513/learning-mate

jobs:
  build-test-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'adopt'

      - name: Build with Gradle
        run: ./gradlew build

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.AWS_PRIVATE_KEY }}
          script: |
            docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
            echo "${{ secrets.APPLICATION_PROPERTIES }}" > application.properties
            
            # Check if MySQL container is running
            if ! docker ps | grep -q mysql; then
              echo "MySQL container is not running. Starting MySQL..."
              docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} -e MYSQL_DATABASE=learning-mate -p 3306:3306 -v mysql-data:/var/lib/mysql mysql:8.0
            else
              echo "MySQL container is already running."
            fi

            # Check if Redis container is running
            if ! docker ps | grep -q redis; then
              echo "Redis container is not running. Starting Redis..."
              docker run -d --name redis -p 6379:6379 -v redis-data:/data redis:6.2-alpine
            else
              echo "Redis container is already running."
            fi

            # Stop and remove the old app container if it exists
            docker stop app && docker rm app || true

            # Start the new app container
            docker run -d --name app \
              -p 8080:8080 \
              -v ./application.properties:/app/application.properties \
              -e SPRING_CONFIG_LOCATION=file:/app/application.properties \
              --link mysql:mysql \
              --link redis:redis \
              ${{ env.DOCKER_IMAGE }}:${{ github.sha }}

            echo "Deployment completed."
