name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: ["main", "dev"]

env:
  DOCKER_REPOSITORY: kabyho3513/learning-mate

permissions:
  contents: read

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

#      - name: Set up application db
#        run: echo "${{}}
      - name : Set up application properties
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}"

      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant exectue permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run : ./gradlew build -x test

      - name: Docker Hub Login
        uses: docker/login-actions@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Docker Build & Push
        run: |
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER }}

      - name: Send deploy.sh
        uses: appleboy.scp-action@master
        with:
          username: ec2-user
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          port: 22
          source: "./deploy/*"
          target: "/home/ec2-user/"

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          username: ec2-user
          host: ${{ secrets.EC2_HOST }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd deploy
            chmod 777 ./deploy.sh
            ./deploy.sh
            docker image prune -f

#name: CI/CD Pipeline
#
#on:
#  push:
#    branches:
#      - main
#
#env:
#  DOCKER_IMAGE: kabyho3513/learning-mate
#
#jobs:
#  build-test-and-deploy:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#          java-version: '17'
#          distribution: 'adopt'
#
#      - name: Build with Gradle
#        run: ./gradlew build
#
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Build and push Docker image
#        uses: docker/build-push-action@v2
#        with:
#          context: .
#          push: true
#          tags: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
#
#      - name: Deploy to AWS EC2
#        uses: appleboy/ssh-action@v0.1.8
#        with:
#          host: ${{ secrets.AWS_EC2_HOST }}
#          username: ec2-user
#          key: ${{ secrets.AWS_PRIVATE_KEY }}
#          script: |
#            docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
#            echo "${{ secrets.APPLICATION_PROPERTIES }}" > application.properties
#
#            # Check if MySQL container is running
#            if ! docker ps | grep -q mysql; then
#              echo "MySQL container is not running. Starting MySQL..."
#              docker run -d --name mysql -e MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }} -e MYSQL_DATABASE=learning-mate -p 3306:3306 -v mysql-data:/var/lib/mysql mysql:8.0
#            else
#              echo "MySQL container is already running."
#            fi
#
#            # Check if Redis container is running
#            if ! docker ps | grep -q redis; then
#              echo "Redis container is not running. Starting Redis..."
#              docker run -d --name redis -p 6379:6379 -v redis-data:/data redis:6.2-alpine
#            else
#              echo "Redis container is already running."
#            fi
#
#            # Stop and remove the old app container if it exists
#            docker stop app && docker rm app || true
#
#            # Start the new app container
#            docker run -d --name app \
#              -p 8080:8080 \
#              -v ./application.properties:/app/application.properties \
#              -e SPRING_CONFIG_LOCATION=file:/app/application.properties \
#              --link mysql:mysql \
#              --link redis:redis \
#              ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
#
#            echo "Deployment completed."


#name: CI/CD Pipeline
#
#on:
#  workflow_dispatch:
#  push:
#    branches:
#      - main
#
#env:
#  DOCKER_IMAGE: kabyho3513/learning-mate
#
#permissions:
#  contents: read
#
#jobs:
#  build-test-and-deploy:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Gradle Caching
#        uses: actions/cache@v4
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#      - name: Build with Gradle
#        run: ./gradlew build -x test
#
#      - name: Log in to Docker Hub
#        uses: docker/login-action@v3
#        with:
#          username: ${{ secrets.DOCKER_USERNAME }}
#          password: ${{ secrets.DOCKER_PASSWORD }}
#
#      - name: Build and push Docker image
#        run: |
#          docker build -f Dockerfile -t ${{ env.DOCKER_IMAGE }}:${{ github.sha }} .
#          docker push ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
#
#      - name: Deploy to AWS EC2
#        uses: appleboy/ssh-action@v0.1.8
#        with:
#          host: ${{ secrets.AWS_EC2_HOST }}
#          username: ec2-user
#          key: ${{ secrets.AWS_PRIVATE_KEY }}
#          script: |
#            docker pull ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
#            docker-compose down
#            echo "${{ secrets.APPLICATION_PROPERTIES }}" > application.properties
#            echo "version: '3.8'
#            services:
#              app:
#                image: ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
#                ports:
#                  - '8080:8080'
#                depends_on:
#                  - db
#                  - redis
#                volumes:
#                  - ./application.properties:/app/application.properties
#                environment:
#                  SPRING_CONFIG_LOCATION: file:/app/application.properties
#              db:
#                image: mysql:8.0
#                volumes:
#                  - mysql-data:/var/lib/mysql
#                environment:
#                  MYSQL_ROOT_PASSWORD: ${{ secrets.MYSQL_ROOT_PASSWORD }}
#                  MYSQL_DATABASE: learning-mate
#                ports:
#                  - '3306:3306'
#              redis:
#                image: redis:6.2-alpine
#                ports:
#                  - '6379:6379'
#                volumes:
#                  - redis-data:/data
#            volumes:
#              mysql-data:
#              redis-data:" > docker-compose.yml
#            docker-compose up -d
#            docker image prune -f
