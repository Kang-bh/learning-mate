name: CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches: ["main", "dev", "prod"]

env:
  DOCKER_REPOSITORY: kabyho3513/learning-mate-server

permissions:
  contents: read

jobs:
  build-and-push-docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

#      - name: Set up application db
#        run: echo "${{}}
      - name: Set up application properties
        run: |
          echo "${{ secrets.APPLICATION_PROPERTIES_PROD }}" > src/main/resources/application.properties


      - name: Gradle Caching
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Grant exectue permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run : ./gradlew build -x test

      - name: Docker Hub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name : Docker Build & Push
        run : |
          docker build -f Dockerfile -t ${{ env.DOCKER_REPOSITORY }}:1.0.0 .
          docker push ${{ env.DOCKER_REPOSITORY }}:1.0.0

      - name: Send deploy.sh
        uses: appleboy/scp-action@master
        with:
          username: ec2-user
          host: ${{ secrets.AWS_EC2_HOST_PROD }}
          key: ${{ secrets.AWS_PRIVATE_KEY_PROD }}
          port: 22
          source: "./deploy/*"
          target: "/home/ec2-user/"

      - name: Deploy to AWS EC2
        uses: appleboy/ssh-action@master
        with:
          username: ec2-user
          host: ${{ secrets.AWS_EC2_HOST_PROD }}
          key: ${{ secrets.AWS_PRIVATE_KEY_PROD }}
          script: |
            cd deploy
            chmod 777 ./deploy.sh
            docker-compose pull  # 최신 이미지 풀
            docker-compose up -d  # 컨테이너 시작
            ./deploy.sh
            docker image prune -f